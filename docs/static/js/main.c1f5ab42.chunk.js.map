{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","squares","setSquare","count","setCount","clickHandler","event","target","getAttribute","currentSquares","console","log","x","isWinner","s","winnerLine","i","line","alert","setTimeout","className","map","item","index","onClick","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAsEeA,MAnEf,WAAgB,IAAD,EAEkBC,mBAAS,CAAC,CAACC,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,QAF3I,mBAEJC,EAFI,KAEKC,EAFL,OAGeH,oBAAS,GAHxB,mBAGJI,EAHI,KAGGC,EAHH,KAKLC,EAAe,SAAAC,GAEjB,IAAMN,EAAOM,EAAMC,OAAOC,aAAa,QAEjCC,EAAc,YAAOR,GAC3BS,QAAQC,IAAIF,GACZ,IAAMG,EAAIT,EAAQ,IAAM,IAEU,OAA9BM,EAAeT,GAAMA,OACrBS,EAAeT,GAAMA,KAAOY,EAE5BV,EAAUO,GAGVL,GAAUD,GACVU,EAASD,KAMXC,EAAW,SAACC,GAWd,IAVA,IAAMC,EAAa,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEAC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIC,EAAOF,EAAWC,GAClBf,EAAQgB,EAAK,IAAIjB,OAASc,GACvBb,EAAQgB,EAAK,IAAIjB,OAASc,GAC1Bb,EAAQgB,EAAK,IAAIjB,OAASc,IAC7BI,MAAOJ,EAAI,QACXK,YAAW,WACPjB,EAAU,CAAC,CAACF,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,MAAM,CAACA,KAAM,UAC3H,QAIf,OACI,yBAAKoB,UAAU,eAEPnB,EAAQoB,KAAI,SAACC,EAAMC,GACf,OAAO,yBACHH,UAAU,WACVI,QAASnB,EACTL,KAAMuB,EACNE,IAAKF,GAEJD,EAAKtB,WClDV0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.c1f5ab42.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n    const [squares, setSquare] = useState([{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null}]);\r\n    const [count, setCount] = useState(true);\r\n\r\n    const clickHandler = event => {\r\n\r\n        const data = event.target.getAttribute('data');\r\n\r\n        const currentSquares = [...squares];\r\n        console.log(currentSquares)\r\n        const x = count ? \"X\" : \"O\";\r\n\r\n        if (currentSquares[data].data === null) {\r\n            currentSquares[data].data = x;\r\n\r\n            setSquare(currentSquares);\r\n\r\n\r\n            setCount(!count);\r\n            isWinner(x);\r\n        }\r\n    }\r\n\r\n    //Расчет выигрышных комбинаций\r\n\r\n    const isWinner = (s) => {\r\n        const winnerLine = [\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            [0,4,8],\r\n            [2,4,6],\r\n        ]\r\n        for (let i = 0; i < 8; i++) {\r\n            let line = winnerLine[i];\r\n            if (squares[line[0]].data === s\r\n                && squares[line[1]].data === s\r\n                && squares[line[2]].data === s) {\r\n                alert (s + ' win');\r\n                setTimeout(() => {\r\n                    setSquare([{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null},{data: null}])\r\n                }, 3000)\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"tic-tac-toe\">\r\n            {\r\n                squares.map((item, index) => {\r\n                    return <div\r\n                        className=\"ttt-grid\"\r\n                        onClick={clickHandler}\r\n                        data={index}\r\n                        key={index}\r\n                    >\r\n                        {item.data}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}